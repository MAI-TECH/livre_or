static create (content, callback) {
        pool.getConnection()
            .then(connection => {
                connection.query("INSERT INTO messages SET content = ?, created_at = ?", [content, new Date()])
                          .then(response => {
                            callback(response);
                          })
                          .catch(err => {
                            throw err;
                        })
            })
            .catch(error => {
                throw error;
            });
    }

    static all (callback) {
        pool.getConnection()
            .then(connection => {
                connection.query("SELECT * FROM messages")
                          .then(response => {
                            callback(response.map((row) => new Message(row)));
                          })
                          .catch(err => {
                            throw err;
                        })
            })
            .catch(error => {
                throw error;
            });
    }

    static find (id, callback) {
        pool.getConnection()
            .then(connection => {
                connection.query("SELECT * FROM messages WHERE id = ? LIMIT 1", [id])
                          .then(response => {
                            callback(new Message(response[0]));
                          })
                          .catch(err => {
                            throw err;
                        })
            })
            .catch(error => {
                throw error;
            });
    }

===================================================================================================================================

static async create(content, callback) {
    let connection;

    try {
        connection = await pool.getConnection();
        const response = await connection.query("INSERT INTO messages SET content = ?, created_at = ?", [content, new Date()]);
        callback(response);
    } catch (error) {
        throw error;
    } finally {
        if (connection) connection.release();
    }
}

static async all(callback) {
    let connection;

    try {
        connection = await pool.getConnection();
        const response = await connection.query("SELECT * FROM messages");
        callback(response.map((row) => new Message(row)));
    } catch (error) {
        throw error;
    } finally {
        if (connection) connection.release();
    }
}

static async find(id, callback) {
    let connection;

    try {
        connection = await pool.getConnection();
        const response = await connection.query("SELECT * FROM messages WHERE id = ? LIMIT 1", [id]);
        callback(new Message(response[0]));
    } catch (error) {
        throw error;
    } finally {
        if (connection) connection.release();
    }
}